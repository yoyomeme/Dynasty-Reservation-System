import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class CustomCalendar extends StatefulWidget {
  final DateTime initialDate;
  final Function(DateTime) onDateSelected;

  CustomCalendar(
      {Key? key, required this.initialDate, required this.onDateSelected})
      : super(key: key);

  @override
  _CustomCalendarState createState() => _CustomCalendarState();
}

class _CustomCalendarState extends State<CustomCalendar> {
  late DateTime _focusedDay;
  late DateTime _selectedDay;
  Map<DateTime, List> _holidays = {};

  @override
  void initState() {
    super.initState();
    _focusedDay = widget.initialDate;
    _selectedDay = widget.initialDate;
    _fetchHolidays();
  }

  Future<void> _fetchHolidays() async {
    const String apiKey = 'bl77xGdg5Honsc9j4F95sPd8NF11saIQ';
    const String country = 'AU'; // Specify your country code
    int year = DateTime.now().year;

    var url = Uri.parse(
        'https://calendarific.com/api/v2/holidays?&api_key=$apiKey&country=$country&year=$year');

    try {
      var response = await http.get(url);
      var data = json.decode(response.body);

      if (response.statusCode == 200 && data['response']['holidays'] != null) {
        for (var holiday in data['response']['holidays']) {
          DateTime holidayDate = DateTime.parse(holiday['date']['iso']);
          _holidays[holidayDate] = [holiday['name']];
        }
        print("Fetched holidays: $_holidays");
      }
    } catch (e) {
      // Handle errors or inform the user
      print('Error fetching holidays: $e');
    }

    //setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    print("Building CustomCalendar with date: $_focusedDay");

    return TableCalendar(
      firstDay: DateTime.utc(2010, 10, 16),
      lastDay: DateTime.utc(2030, 3, 14),
      focusedDay: _focusedDay,
      selectedDayPredicate: (day) => isSameDay(_selectedDay, day),
      onDaySelected: (selectedDay, focusedDay) {
        setState(() {
          _selectedDay = selectedDay;
          _focusedDay = focusedDay;
        });
        widget.onDateSelected(selectedDay);
      },
      eventLoader: (day) {
        return _holidays[day] ?? [];
      },
      // ...additional customization
      calendarBuilders: CalendarBuilders(
        holidayBuilder: (context, date, events) {
          if (_holidays.containsKey(date)) {
            /*return Positioned(
                right: 1,
                top: 1,
                //child: _buildHolidayMarker(date),
                );*/
          }
        },
      ),
    );
  }
}
